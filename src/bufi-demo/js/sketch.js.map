{"version":3,"sources":["js/node_modules/browser-pack/_prelude.js","js/_lib/_log.js","js/tests/js/_circle.js","js/tests/js/_control-config.js","js/tests/js/main_sketch.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"js/sketch.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var log = function(input) {\r\n    console.log(input);\r\n};\r\n\r\n// Tell the module what to return/export\r\nmodule.exports = log;\r\n","var circle = function(x, y, vars) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.vars = vars;\r\n};\r\n\r\ncircle.prototype.draw = function() {\r\n    var p = P$; // avoid repetition\r\n    var adjust = this.vars.animate ? Math.sin(this.vars.angle) : 0;\r\n    var radius = Number(this.vars.radius) + adjust * 15;\r\n    p.ellipse(this.x, this.y, radius, radius);\r\n}\r\n\r\ncircle.prototype.setRadius = function(r) {\r\n    this.radius = r;\r\n}\r\n\r\n// Tell the module what to return/export\r\nmodule.exports = circle;\r\n","var controlConfig = function(controls, vars, xOffset, yOffset) {\r\n\r\n    // WARNING: only use to clone 'simple' objects!\r\n    // having a copy of vars makes it easy to reset to defaults later\r\n    var defaults =  (JSON.parse(JSON.stringify(vars)));\r\n\r\n    return {\r\n        circleControls : [{\r\n                type: 'range',\r\n                options: {\r\n                    id: \"radius\",\r\n                    label: \"radius\",\r\n                    min: 4,\r\n                    max: Math.ceil(xOffset + yOffset),\r\n                    step: 1,\r\n                    value: vars.radius\r\n                },\r\n                //NOTE: callback scope issues apply when object 'methods' are used as a callback...\r\n                // simple enough to workaround if you don't make object props private:\r\n                callback: function(val) {\r\n                        vars.radius = val;\r\n                    }\r\n                    // Alternatively you can do the extra work required to maintain scope:\r\n                    // callback: c.setRadius.bind(c) //preferred\r\n                    // callback: function(val) { c.setRadius(val) } //kludge\r\n            },\r\n            {\r\n                type: 'range',\r\n                options: {\r\n                    id: \"colourRed\",\r\n                    label: \"R\",\r\n                    min: 0, max: 255, step: 1,\r\n                    value: vars.circleColour.r\r\n                },\r\n                callback: function(val) {\r\n                    vars.circleColour.r = val;\r\n                }\r\n            }, {\r\n                type: 'range',\r\n                options: {\r\n                    id: \"colourGreen\",\r\n                    label: \"G\",\r\n                    min: 0, max: 255, step: 1,\r\n                    value: vars.circleColour.g\r\n                },\r\n                callback: function(val) {\r\n                    vars.circleColour.g = val;\r\n                }\r\n            }, {\r\n                type: 'range',\r\n                options: {\r\n                    id: \"colourBlue\",\r\n                    label: \"B\",\r\n                    min: 0, max: 255, step: 1,\r\n                    value: vars.circleColour.b\r\n                },\r\n                callback: function(val) {\r\n                    vars.circleColour.b = val;\r\n                }\r\n            }, {\r\n                type: 'range',\r\n                options: {\r\n                    id: \"colourAlpha\",\r\n                    label: \"alpha\",\r\n                    min: 0.1, max: 1, step: 0.01,\r\n                    value: vars.circleColour.a\r\n                },\r\n                callback: function(val) {\r\n                    vars.circleColour.a = val;\r\n                }\r\n            },\r\n            {\r\n                type: 'checkbox',\r\n                options: {\r\n                    id: \"strokeEnabled\",\r\n                    label: \"stroke enabled\",\r\n                    checked: vars.stroke\r\n                },\r\n                callback: function(val) {\r\n                    vars.stroke = val;\r\n                }\r\n            }],\r\n\r\n        sketchControls : [{\r\n                type: 'radio',\r\n                options: {\r\n                    id : \"bgColour\",\r\n                    label : \"background\",\r\n                    input: [{\r\n                        label: \"red\",\r\n                        value: \"red\"\r\n                    }, {\r\n                        label: \"green\",\r\n                        value: \"green\"\r\n                    }, {\r\n                        label: \"blue\",\r\n                        value: \"blue\"\r\n                    }]\r\n                },\r\n                callback: function(val) {\r\n                    vars.background = val;\r\n                }\r\n            },\r\n            {\r\n                type: 'switch',\r\n                options: {\r\n                    id: \"animEnabled\",\r\n                    on: \"move!\",\r\n                    off: \"static\",\r\n                    checked: vars.animate\r\n                },\r\n                callback: function(val) {\r\n                    vars.animate = val;\r\n                }\r\n            },\r\n            {\r\n                type: 'button',\r\n                options: {\r\n                    label: \"reset\"\r\n                },\r\n                callback: function() {\r\n                    controls.setValue('radius', defaults.radius);\r\n                    controls.setValue('colourRed', defaults.circleColour.r);\r\n                    controls.setValue('colourGreen', defaults.circleColour.g);\r\n                    controls.setValue('colourBlue', defaults.circleColour.b);\r\n                    controls.setValue('colourAlpha', defaults.circleColour.a);\r\n                    controls.setValue('strokeEnabled', defaults.stroke);\r\n                    controls.setValue('animEnabled', defaults.animate);\r\n                    controls.setValue('bgColour', defaults.background);\r\n                }\r\n            }]\r\n        }\r\n\r\n};\r\n\r\nmodule.exports = controlConfig;\r\n","\"use strict\";\r\n\r\nvar b = {};\r\nvar Circle = require('./_circle');\r\nvar controlConfig = require('./_control-config');\r\n\r\n//TODO: find out how to reference root/_lib without relative paths\r\nb.log = require('../../_lib/_log');\r\n\r\n// Stop p5js polluting the global namespace by using instance mode\r\nglobal.P$ = new p5(function(p) {\r\n\r\n    var circles = [];\r\n    var numCircles = 10;\r\n    var vars = {\r\n        stroke: true,\r\n        radius: 10,\r\n        circleColour: {\r\n            r: 255,\r\n            g: 255,\r\n            b: 255,\r\n            a: 0.25\r\n        },\r\n        sketchColours: {\r\n            red: '#cc0000',\r\n            green: '#33cc33',\r\n            blue: '#0099dd'\r\n        },\r\n        background: 'red',\r\n        animate: true,\r\n        angle: 0\r\n    };\r\n    var controls;\r\n    var testCallback = function(val) {\r\n        console.info(\"value in callback: \" + val)\r\n    };\r\n\r\n    p.setup = function() {\r\n        p.createCanvas(400, 300);\r\n\r\n        var xOffset = p.width / (numCircles + 1);\r\n        var yOffset = p.height / (numCircles + 1);\r\n\r\n        for (var i = 0; i < numCircles; i++) {\r\n            for (var j = 0; j < numCircles; j++) {\r\n                circles[i * numCircles + j] = new Circle(xOffset + xOffset * i, yOffset + yOffset * j, vars);\r\n            }\r\n        }\r\n\r\n        controls = new bufi('#control01');\r\n        // adding grouped controls\r\n        //NOTE: this feels a bit heavy going in order to externalise config\r\n        var config = controlConfig(controls, vars, xOffset, yOffset);\r\n        controls.addControlGroup(config.circleControls, \"circle options\");\r\n        controls.addControlGroup(config.sketchControls, \"sketch options\");\r\n        controls.setValue('bgColour', vars.background)\r\n    };\r\n\r\n    p.draw = function() {\r\n        p.background(vars.sketchColours[vars.background]);\r\n        var cc = vars.circleColour;\r\n        var colour = 'rgba(' + [cc.r, cc.g, cc.b, cc.a].join(',') + ')';\r\n\r\n        p.fill(colour);\r\n\r\n        if(vars.stroke) {\r\n            p.strokeWeight(2);\r\n            p.stroke('#000');\r\n        }\r\n        else {\r\n            p.noStroke();\r\n        }\r\n\r\n        for (var i = 0, len = numCircles * numCircles; i < len; i++) {\r\n            circles[i].draw();\r\n        }\r\n\r\n        vars.angle += 0.05;\r\n    };\r\n\r\n    // p.mousePressed = function () {\r\n    //\r\n    // };\r\n\r\n    // p.mouseReleased = function () {\r\n    //\r\n    // };\r\n\r\n}, \"sketch01\");\r\n"]}